{"version":3,"sources":["components/AddCategory.js","helpers/getFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["useStyles","makeStyles","root","backgroundImage","padding","borderRadius","width","AddCategory","setCategories","classes","useState","inputValue","setInputValue","className","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getFetchGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","imagen","fontFamily","titleH2","color","textAlign","fontSize","GifExpertApp","categories","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qNAKMA,EAAYC,aAAW,iBAAK,CAC9BC,KAAK,CACDC,gBAAiB,sDACjBC,QAAS,OACTC,aAAc,MACdC,MAAO,WASFC,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEnBC,EAAUT,IAF4B,EAKRU,mBAAS,IALD,mBAKrCC,EALqC,KAKzBC,EALyB,KAyB5C,OACI,qBAAKC,UAAWJ,EAAQP,KAAxB,SAGI,sBAAMY,SAfO,SAACC,GAElBA,EAAEC,iBAEEL,EAAWM,OAAOC,QAAU,IAE5BV,GAAe,SAAAW,GAAG,OAAKR,GAAL,mBAAoBQ,OACtCP,EAAc,MAQd,SACI,uBACAQ,KAAK,OACLC,MAAQV,EAERW,SA1Bc,SAACP,GACvBH,EAAcG,EAAEQ,OAAOF,e,gCCxBdG,EAAY,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAClBC,EADkB,iDAC8BC,UAAUH,GADxC,+DAELI,MAAOF,GAFF,cAElBG,EAFkB,gBAGHA,EAAKC,OAHF,uBAGjBC,EAHiB,EAGjBA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATlB,kBAalBM,GAbkB,4CAAH,sDCDhBO,EAAc,SAAC,GAAsB,IAArBJ,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEpC,OACI,qBAAKd,UAAU,6EAAf,SACI,qBAAK4B,IAAKd,EAAKe,IAAKL,GAAYD,MCF/BO,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECAb,SAACA,GAAc,IAAD,EAEZf,mBAAS,CAC/BsB,KAAM,GACNY,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAwBtC,OAhBAC,qBAAU,WAENvB,EAAaC,GACRuB,MAAK,SAAAC,GAEFH,EAAS,CACLd,KAAMiB,EACNL,SAAS,SAKtB,CAACnB,IAIGoB,EDrBwBK,CAAazB,GAAhCa,EAHyB,EAG9BN,KAAaY,EAHiB,EAGjBA,QAEpB,OACI,qCACA,qBAAI/B,UAAW,qEAAf,cAAuFY,KACvF,sBAAKZ,UAAU,YAAf,UAEK+B,GAAW,mBAAG/B,UAAU,2DAAb,wBAGRyB,EAAOJ,KAAK,SAACiB,GAAD,OAGR,aAHsB,CAGrB,EAAD,eAAiCA,GAAfA,EAAOf,cEXvCpC,EAAYC,aAAW,iBAAO,CAChCC,KAAM,CACFkD,WAAY,UAEhBC,QAAQ,CACJlD,gBAAiB,sDACjBmD,MAAO,OACPlD,QAAS,OACTmD,UAAW,SACXC,SAAU,OACVnD,aAAc,WAQToD,EAAe,WACxB,IAAMhD,EAAUT,IADc,EAEMU,mBAAS,CAAC,KAFhB,mBAEvBgD,EAFuB,KAEXlD,EAFW,KAI9B,OACI,sBAAKK,UAAWJ,EAAQP,KAAxB,UAEI,oBAAIW,UAAWJ,EAAQ4C,QAAvB,0BAGA,cAAC,EAAD,CAAa7C,cAAgBA,IAC7B,uBAEA,6BAEQkD,EAAWxB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAASA,SAAUA,GAAeA,Y,MCtC1DkC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9b1d7faf.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\n\r\n//ESTILOS\r\nconst useStyles = makeStyles(()=>({\r\n    root:{\r\n        backgroundImage: 'linear-gradient( 135deg, #3C8CE7 10%, #00EAFF 100%)',\r\n        padding: '10px',\r\n        borderRadius: '5px',\r\n        width: '25%'\r\n       \r\n    },\r\n\r\n}))\r\n\r\n\r\n//COMPONENTE BARRA DE BUSQUEDA\r\n//importo como prop a setCategories en el argumento\r\nexport const AddCategory = ({setCategories}) => {\r\n    \r\n    const classes = useStyles();\r\n\r\n    //lo que ingresa la persona se guarda en inputvalue\r\n    const [inputValue, setInputValue] = useState('') // si está importado ya hago la desestructuración y saco el react\r\n\r\n   //e es evento de entrada, lo que voy escribiendo por consola lo pasa por la funcion\r\n    const handleInputChange = (e) => { \r\n        setInputValue(e.target.value); \r\n            \r\n    };\r\n\r\n    //evento al apretar enter\r\n    const handleSubmit = (e) => { \r\n        //previene que no se actualice la pagina al apretar enter\r\n        e.preventDefault();         \r\n        //if para chequear que no tenga entradas sin texto\r\n        if (inputValue.trim().length >= 1) {    \r\n            //al apretar enter llamamos al setCategories y lo guardamos dentro de categories\r\n            setCategories( cat => [inputValue, ...cat]); //uso el callback cat para guardar en categories sin tener que importarla como prop\r\n            setInputValue(''); //pone en blanco la barra de busqueda\r\n        }    \r\n    };    \r\n\r\n    return (\r\n        <div className={classes.root}>\r\n\r\n            {/* //mando el primer arg del onsubmit al handleSubmit, y eso es lo que atrapa esa funcion   */}\r\n            <form onSubmit={ handleSubmit }> \r\n                <input\r\n                type='text'\r\n                value={ inputValue } //lo que ingresa se va al inputValue\r\n                //  funcion onchange significa que cuando se produce un cambio, muestra el elemento e en consola\r\n                onChange={handleInputChange}\r\n                />\r\n            </form>\r\n            \r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n\r\n\r\n};","    \r\n    \r\n    //necesito recibir categoria y hacer una peticion http\r\n    //creo funcion \r\n    export const getFetchGifs = async (category) => {                             //encode reemplaza los espacios que podría haber en la category por %20 u otras cosas\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category) }&limit=10&api_key=r74zaGMNgyvhh5uR4YPyFrbZSWLwQh6N`\r\n        const resp = await fetch( url );\r\n        const {data} = await resp.json();  //data desestructurado\r\n\r\n        const gifs = data.map( img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url //el ? es por si no viene la carpeta imagen\r\n            }\r\n        });\r\n    \r\n       return gifs;\r\n    };\r\n\r\n\r\n","import React from 'react'\r\n\r\n// acá recibo una imagen\r\nexport const GifGridItem = ({id, title, url}) => { //recibo las props que me mandan desde gifgrid y las desestructuro\r\n\r\n    return (\r\n        <div className='card animate__animated animate__fadeInUp animate__delay-1s animate__faster'>\r\n            <img src={url} alt={title} key={id}/>\r\n            {/* <p>{title}</p> */}\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport {GifGridItem} from './GifGridItem'\r\n\r\n//COMPONENTE\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    //\r\n    const {data:images, loading} = useFetchGifs(category); //1) llamo a mi custom hook useFectGifs, voy para alla    \r\n\r\n    return (\r\n        <>\r\n        <h4 className= 'animate__animated animate__flash animate__delay-1s animate__faster'> { category }</h4>\r\n        <div className='card-grid'>\r\n             \r\n            {loading && <p className='animate__animated animate__fadeOutDown animate__delay-1s'> 'Loading'</p>}\r\n\r\n            { //mapeo cada imagen de images y saco id y title, para pasar la jey y mostrar el title en la li\r\n                images.map( (imagen) => ( //está desestructurado, adentro del cb sino iria images, y el resto sería images.id images.title\r\n                    \r\n                    //inserto el componente gifgriditem, cada elemento tiene que tener su unico id\r\n                    <GifGridItem key={imagen.id} {...imagen}/> //le mando cada una de las propiedades de las imagen como una prop independiente para usarlo en el componente\r\n                    ))\r\n            }               \r\n\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\n","import {useState, useEffect} from 'react'\r\nimport { getFetchGifs } from '../helpers/getFetchGifs';\r\n\r\n//los custom hooks funcionan como functional components\r\n// 2) este hook hace el trabajo más pesado\r\nexport const useFetchGifs = (category) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });    \r\n\r\n    //3)uso useEffect que se dispara solo cuando cambia la category\r\n    useEffect(() => {\r\n\r\n        getFetchGifs(category) //4) hago la peticion http mediante el helper enviándole la category como parametro\r\n            .then(imgs=>{ //5) tenemos las imagenes\r\n                \r\n                setState({ //6)cuando las tenemos llamamos al setState cambiando la informacion\r\n                    data: imgs,\r\n                    loading: false        \r\n                })\r\n                            \r\n            })\r\n\r\n    }, [category])\r\n\r\n    \r\n\r\n    return state;\r\n\r\n   \r\n        \r\n\r\n\r\n}\r\n","import React, {useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n// import { GifGridItem } from './components/GifGridItem';\r\n\r\n\r\n//COMPONENTE QUE RENDERIZA\r\n\r\n//Estilos\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        fontFamily: \"Nunito\",\r\n    },\r\n    titleH2:{\r\n        backgroundImage: 'linear-gradient( 135deg, #3C8CE7 10%, #00EAFF 100%)',\r\n        color: \"#fff\",\r\n        padding: \"15px\",\r\n        textAlign: \"center\",\r\n        fontSize: '2rem',\r\n        borderRadius: '5px',      \r\n\r\n    },\r\n\r\n}));\r\n\r\n//componente\r\n\r\nexport const GifExpertApp = () => {\r\n    const classes = useStyles();\r\n    const [categories, setCategories] = useState(['']) //funcion para añadir categorias, con valor inicial = arreglo de 3 series\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n\r\n            <h2 className={classes.titleH2}>GifExpertApp</h2>\r\n            {/* //le mando una prop al addcategories y la referencia a setCategories entre {} */}\r\n\r\n            <AddCategory setCategories= {setCategories}/>           \r\n            <hr/>\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                        <GifGrid category={category} key={category} />\r\n                        \r\n                    ))\r\n                    \r\n                }\r\n            </ol>\r\n\r\n        </div>\r\n    )\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}